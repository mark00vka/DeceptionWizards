[gd_scene load_steps=16 format=3 uid="uid://c6y6j5d65tesp"]

[ext_resource type="PackedScene" uid="uid://efhli5mx1ocb" path="res://player/player.tscn" id="1_gx7nr"]
[ext_resource type="Resource" uid="uid://deu0peg282uw6" path="res://player/p1_controls.tres" id="3_mi2kk"]
[ext_resource type="Script" path="res://ui/camera_3d.gd" id="4_2ybbk"]
[ext_resource type="Resource" uid="uid://c1bs0xj1k2bgb" path="res://player/p2_controls.tres" id="4_3ab4h"]
[ext_resource type="Shader" path="res://shaders/dither_screen.gdshader" id="4_371af"]
[ext_resource type="PackedScene" uid="uid://hni7dct4exvb" path="res://models/board/boardnoplane.fbx" id="5_w4thp"]
[ext_resource type="PackedScene" uid="uid://cpn2ympvqfo3q" path="res://ui/pick_object_ui.tscn" id="7_4x0s1"]
[ext_resource type="PackedScene" uid="uid://d0rh4dbxufpbq" path="res://tile-selector/tile_selector.tscn" id="9_htbmn"]
[ext_resource type="PackedScene" uid="uid://odx7a17ireag" path="res://models/islands/bigisland.fbx" id="10_mafkg"]

[sub_resource type="GDScript" id="GDScript_10hql"]
script/source = "@tool

extends Node3D

const GROUND_TILE = preload(\"res://tiles/ground_tile/ground_tile.tscn\")
const BOUNDARY_TILE = preload(\"res://tiles/boundary_tile/boundary_tile.tscn\")
const FINISH_TILE = preload(\"res://tiles/finish_tile/finish_tile.tscn\")

const STAIRS = preload(\"res://tiles/stairs/stairs.tscn\")
const PLATFORM = preload(\"res://tiles/platform_tile/platform.tscn\")
const WALL = preload(\"res://tiles/wall_tile/wall.tscn\")

var BUILD_TILES = [STAIRS, PLATFORM, WALL]

const PLAYER = preload(\"res://player/player.tscn\")

@export var map_size : Vector3i = Vector3i(4, 4, 4)
@export var tile_size : float = 5.0
@export var tile_height : float = 2.5

var player1_tiles: Array[PackedScene]
var player2_tiles: Array[PackedScene]

var grid : Dictionary = {}

@onready var pick_object_ui: Control = $PickObjectUI
@onready var tile_selector_blue: Node3D = $TileSelectorBlue
@onready var tile_selector_red: Node3D = $TileSelectorRed

signal changed_player

func _ready() -> void:
	grid = {}
	player1_tiles = []
	player2_tiles = []
	generate_grid()
	$Player.global_position = tilemap_to_global(Vector2i(map_size.x-1, map_size.z-1))
	$Player2.global_position = tilemap_to_global(Vector2i(map_size.x-1, map_size.z-1)) + Vector3(1, 0, 0)
	place_item(FINISH_TILE, Vector2i(0, 0),  1, 1)
	Global.change_phase.connect(phase_changed)
	Global.build_timeout.connect(place_obstacle_on_tilecursor)
	Global.set_tile_select_phase()
	tile_selector_blue.change_color(0)
	tile_selector_blue.player_blue = true
	tile_selector_red.change_color(1)
	tile_selector_red.player_blue = false
	
func _input(event: InputEvent) -> void:
	if Global.is_building_phase():
		tile_selector_input(event, tile_selector_blue)
		tile_selector_input(event, tile_selector_red)
	
func tile_selector_input(event, tile_selector):
	if tile_selector.on_free_tile():
		if (InputManager.place_real_blue(event) and tile_selector.player_blue) \\
			or (InputManager.place_real_red(event) and not tile_selector.player_blue) \\
			and tile_selector.active:
				
			place_obstacle(tile_selector, true)
			tile_selector.active = false
		
		if (InputManager.place_fake_blue(event) and tile_selector.player_blue) \\
			or (InputManager.place_fake_red(event) and not tile_selector.player_blue) \\
			and tile_selector.active:
				
			place_obstacle(tile_selector, false)
			tile_selector.active = false
			tile_selector.tile_not_selected = true
				
	if (InputManager.tile_selected_blue(event) and tile_selector.player_blue)\\
		or (InputManager.tile_selected_red(event) and not tile_selector.player_blue):
		
		if not tile_selector.active: 
			Global.finished_placement+=1
			if Global.finished_placement == 6:
				Global.set_chase_phase()
			tile_selector.hide()
			tile_selector.tile_not_selected = false
	
	if (InputManager.tile_rot_blue(event) and tile_selector.player_blue and tile_selector.tile_not_selected)\\
		or (InputManager.tile_rot_red(event) and not tile_selector.player_blue and tile_selector.tile_not_selected):
		
		if not tile_selector.active:
			rotate_placed_obstacle(tile_selector)
			
		
func place_obstacle(tile_selector, real: bool):
	if(selected_tile_free(tile_selector.pos, tile_selector.lvl)):
		if tile_selector.player_blue:
			place_item(player1_tiles[0], tile_selector.pos, tile_selector.lvl, real)
			player1_tiles.remove_at(0)
		else:
			place_item(player2_tiles[0], tile_selector.pos, tile_selector.lvl, real)
			player2_tiles.remove_at(0)
		
func rotate_placed_obstacle(tile_selector):
	grid[pos_lvl_to_vector3(tile_selector.pos, tile_selector.lvl)].global_rotation.y += PI/2

func generate_grid():
	for i in range(-1, map_size.x+1):
		for j in range(-1, map_size.z+1):
			if(i in range(map_size.x) and j in range(map_size.z)):
				generate_tile(i, j)
				await get_tree().create_timer(0.1).timeout
			else:
				generate_boundary_tile(i, j)

func generate_tile(x: int, y: int):
	var ground_tile =  GROUND_TILE.instantiate()
	add_child(ground_tile, true)		
	ground_tile.global_position = tilemap_to_global(Vector2i(x, y))
	ground_tile.scale = Vector3(0.1,0.1,0.1)
	var tween = get_tree().create_tween()
	tween.tween_property(ground_tile, \"scale\", Vector3.ONE, 0.1).set_trans(Tween.TRANS_SINE)
	
	if ((x == 0 and y == 0) or (x == map_size.x-1 and y == map_size.z-1)) and ground_tile.has_obstacle:
		ground_tile.get_children()[0].queue_free()
		ground_tile.has_obstacle = false
		
	if ground_tile.has_obstacle:
		grid[Vector3i(x, 0, y)] = ground_tile
		
	if (x + y) % 2 == 0:
		ground_tile.get_node(\"MeshInstance3D\").mesh.material.albedo_texture = preload(\"res://tiles/ground_tile/dark_ground.png\")
	
func generate_boundary_tile(x: int, y: int):
	var boundary_tile =  BOUNDARY_TILE.instantiate()
	add_child(boundary_tile, true)		
	boundary_tile.global_position = tilemap_to_global(Vector2i(x, y))

func place_item(item : PackedScene, pos : Vector2i, level : int, real: bool = true, rot: int = 0):
	var inst : Tile = item.instantiate()
	add_child(inst, true)
	inst.global_position = tilemap_to_global(pos, level)
	inst.global_rotation.y = rot * PI / 2
	inst.real = real
	grid[pos_lvl_to_vector3(pos, level)] = inst
		
func place_obstacle_on_tilecursor():
	if tile_selector_blue.active:
		place_obstacle(tile_selector_blue, true)
		
	if tile_selector_red.active:
		place_obstacle(tile_selector_red, true)
		
	Global.set_chase_phase()
		

func phase_changed():
	if Global.is_tile_select_phase():
		player1_tiles = []
		player2_tiles = []
		pick_object_ui.show_ui()
		%MainCamera.building()
		
	if Global.is_building_phase():
		%MainCamera.building()
		tile_selector_blue.show()
		tile_selector_blue.active = true
		tile_selector_red.show()
		tile_selector_blue.global_position = tilemap_to_global(Vector2i(0,0))
		tile_selector_red.active = true
		tile_selector_red.global_position = tilemap_to_global(Vector2i(0,0))
		pick_object_ui.hide()
		
	if Global.is_chase_phase():
		print(\"CHASE\")
		%MainCamera.chase()
		tile_selector_blue.active = false
		tile_selector_blue.visible = false
		tile_selector_red.active = false
		tile_selector_red.visible = false
	
func tilemap_to_global(pos: Vector2i, level : int = 0):
	return Vector3(pos.x, 0, pos.y) * tile_size + Vector3.UP * level * tile_height
	
func global_to_tilemap(pos: Vector3):
	var pos1 = pos - Vector3.UP * pos.y * tile_height
	pos1 /= tile_size
	return Vector3i(pos1.x, pos1.y, pos1.z)

func selected_tile_free(tile_pos: Vector2i, tile_lvl: int) -> bool:
	return not grid.has(pos_lvl_to_vector3(tile_pos, tile_lvl))

func pos_lvl_to_vector3(pos: Vector2i, lvl: int) -> Vector3i:
	return Vector3(pos.x, lvl, pos.y)
	
func _on_pick_object_ui_player_1_picked_tile(tile: PackedScene) -> void:
	player1_tiles.append(tile)

func _on_pick_object_ui_player_2_picked_tile(tile: PackedScene) -> void:
	player2_tiles.append(tile)
"

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_dagti"]
energy_multiplier = 0.5

[sub_resource type="Sky" id="Sky_1bi71"]
sky_material = SubResource("PanoramaSkyMaterial_dagti")

[sub_resource type="Environment" id="Environment_3p8xg"]
background_mode = 2
background_energy_multiplier = 0.5
sky = SubResource("Sky_1bi71")
sky_custom_fov = 100.0
tonemap_mode = 2
glow_enabled = true

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ovimu"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kiyha"]
shader = ExtResource("4_371af")
shader_parameter/quantize_size = 1.0
shader_parameter/handle_scale = null
shader_parameter/handle_subpixels = true
shader_parameter/dither_enabled = true
shader_parameter/bayer_pattern = 3.0
shader_parameter/divisions = 4.0
shader_parameter/contrast = 1.0
shader_parameter/shift = 0.0
shader_parameter/grayscale = null
shader_parameter/use_palette = null

[node name="Main" type="Node3D"]
script = SubResource("GDScript_10hql")
map_size = Vector3i(6, 4, 6)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_3p8xg")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.339597, -0.804549, 0.487213, -0.00206689, 0.518634, 0.854994, -0.940569, 0.289346, -0.17779, 0, 0, 0)
shadow_enabled = true

[node name="BuildingCamera" type="Camera3D" parent="."]
unique_name_in_owner = true
transform = Transform3D(1, 0, 0, 0, 0.632516, 0.774547, 0, -0.774547, 0.632516, 5.62736, 48.7606, 45.9308)
visible = false
fov = 35.0

[node name="Player" parent="." instance=ExtResource("1_gx7nr")]
transform = Transform3D(1.06066, 0, 1.06066, 0, 1.5, 0, -1.06066, 0, 1.06066, 25, 0, 25)
motion_mode = 0
controls = ExtResource("3_mi2kk")
player_blue = true

[node name="Player2" parent="." instance=ExtResource("1_gx7nr")]
transform = Transform3D(1.06066, 0, 1.06066, 0, 1.5, 0, -1.06066, 0, 1.06066, 26, 0, 25)
motion_mode = 0
controls = ExtResource("4_3ab4h")

[node name="boardnoplane" parent="." instance=ExtResource("5_w4thp")]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 4.73518, -0.171568, 6.24596)

[node name="TileSelectorRed" parent="." instance=ExtResource("9_htbmn")]
player_blue = false

[node name="TileSelectorBlue" parent="." instance=ExtResource("9_htbmn")]

[node name="Timer" type="Timer" parent="."]

[node name="bigisland" parent="." instance=ExtResource("10_mafkg")]
transform = Transform3D(-648.758, 0, 760.995, 0, 1000, 0, -760.995, 0, -648.758, 6.09583, -13.6038, 7.28959)

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
material = SubResource("ShaderMaterial_ovimu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
handle_input_locally = false
size = Vector2i(1280, 720)
render_target_update_mode = 4

[node name="MainCamera" type="Camera3D" parent="SubViewportContainer/SubViewport"]
unique_name_in_owner = true
transform = Transform3D(0.707107, -0.353553, 0.612373, 0, 0.866026, 0.499999, -0.707107, -0.353553, 0.612373, 35.413, 23.849, 33.548)
fov = 35.0
script = ExtResource("4_2ybbk")

[node name="PickObjectUI" parent="." instance=ExtResource("7_4x0s1")]
visible = false

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_kiyha")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[connection signal="changed_player" from="." to="." method="_on_changed_player"]
[connection signal="player1_picked_tile" from="PickObjectUI" to="." method="_on_pick_object_ui_player_1_picked_tile"]
[connection signal="player2_picked_tile" from="PickObjectUI" to="." method="_on_pick_object_ui_player_2_picked_tile"]
